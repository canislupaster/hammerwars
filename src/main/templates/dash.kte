@import kotlinx.serialization.json.Json
@import kotlinx.serialization.encodeToString
@import win.hammerwars.Dashboard

@param dash: Dashboard

@template.main(
    title="HammerWars - Dashboard",
    body=@`
    <div class="section" >
        <div class="container" >
            <form method="POST" style="display: inline" >
                <p>Submissions are ${if(dash.closed) "CLOSED" else "OPEN"}, ${if (dash.locked) "LOCKED" else "UNLOCKED"}. Contest ${if (dash.inProgress) "IN PROGRESS" else "IDLE"}.

                There are ${dash.numSubmissions}/${dash.maxSubmissions} completed submissions (${dash.users.size} saved).

                <button class="link" formaction="/dashboard/run" >Run game</button></p>
            </form>

            <form method="POST" action="/dashboard/props" >
                <div class="pretty p-switch p-fill">
                    <input type="checkbox" name="locked" checked="${dash.locked}" />
                    <div class="state"><label for="locked" >Locked</label></div>
                </div>
                <div class="pretty p-switch p-fill">
                    <input type="checkbox" name="closed" checked="${dash.closed}" />
                    <div class="state"><label for="closed" >Closed</label></div>
                </div>
                <div class="pretty p-switch p-fill">
                    <input type="checkbox" name="inProgress" checked="${dash.inProgress}" />
                    <div class="state"><label for="inProgress" >In progress</label></div>
                </div>

                <p>Scoring configuration:</p>
                <textarea placeholder="Scoreboard config" name="scoreboard" >${dash.scoreboard}</textarea>

                <button class="btn" ><h1>Update</h1></button>
            </form>

            <form method="POST" >
                <div class="group" >
                    <button class="btn" formaction="/dashboard/clear" ><h1>Clear submissions</h1></button>
                    <button class="btn" formaction="/dashboard/unfreeze" ><h1>Unfreeze scoreboard</h1></button>
                </div>
            </form>
        </div>
    </div>

    <div class="section bg" >
        <div class="center" >
            <div id="spreadsheet" ></div>
        </div>
    </div>

    <form method="POST" >
        <div class="section" >
            <div class="container" >
                <div class="group" >
                    <a id="download" href="#" >Download CSV</a>
                    <a href="/dashboard/users" >Download user data</a>
                    <a href="/dashboard/teams" >Download team data</a>
                </div>

                <p>Team IDs:</p>
                <textarea placeholder="Enter IDs here" name="teams" ></textarea>

                <button formaction="/dashboard/accept" class="btn" >Accept</button>
                <button formaction="/dashboard/reject" class="btn" >Reject</button>
                <button formaction="/dashboard/removefromgame" class="btn" >Remove from game</button>
            </div>
        </div>
    </form>`,
    head=@`
    <script src="https://bossanova.uk/jspreadsheet/v4/jexcel.js"></script>
    <link rel="stylesheet" href="https://bossanova.uk/jspreadsheet/v4/jexcel.css" type="text/css" />

    <script src="https://jsuites.net/v4/jsuites.js"></script>
    <link rel="stylesheet" href="https://jsuites.net/v4/jsuites.css" type="text/css" />

    <script>
            const data = $unsafe{ Json.encodeToString(dash.users) };

            const dataFlat = data.map((row) => ({
                ...row,
                ...(row.submitted==null ? {} : row.submitted)
            }));

            const cols = [
                {type: "numeric", title: "id", name: "id", width: 60},
                {type: "numeric", title: "#", name: "num", width: 10},
                {type: "text", title: "email", name: "email", width: 60},
                {type: "text", title: "modified", name: "lastSaved", width: 60},
                {type: "text", title: "submitted", name: "time", width: 60},
                {type: "text", title: "pizza", name: "pizza", width: 60},
                {type: "text", title: "random", name: "randomNumber", width: 20},
                {type: "numeric", title: "enjoyment", name: "enjoyment", width: 10},
                {type: "text", title: "codeforces", name: "cfHandle", width: 20},
                {type: "text", title: "shirt", name: "shirt", width: 20},
                {type: "numeric", title: "team id", name: "teamId", width: 20},
                // {type: "text", title: "team", name: "cfTeam", width: 20},
                {type: "text", title: "name", name: "name", width: 40},
                {type: "text", title: "answer", name: "ans", width: 20},
                {type: "checkbox", title: "needs team", name: "lookingForTeam", width: 10},
                {type: "checkbox", title: "accepted", name: "accepted", width: 10},
            ].map((x) => ({...x, width: x.width*2.5}));

            const colFilter = new Set(cols.map((x) => x.name));

            for (const prop of ["lastSaved", "time"]) {
                for (const row of dataFlat) {
                    if (row[prop] != null) row[prop] = new Date(row[prop]).toLocaleString();
                    for (const k in row) if (!colFilter.has(k)) delete row[k];
                }
            }

            window.addEventListener("DOMContentLoaded", () => {
                const table = jspreadsheet(document.getElementById('spreadsheet'), {
                    data: dataFlat,
                    search: true,
                    tableOverflow: true,
                    tableWidth: "80vw",
                    csvFileName: "hammerwars",
                    editable: false,
                    includeHeadersOnDownload: true,
                    columns: cols
                });

                document.getElementById("download").addEventListener("click", () => {
                    table.download(true);
                });
            });
        </script>
    `
)
